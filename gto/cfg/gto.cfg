
#!/usr/bin/env python
PACKAGE = "gto"

from math import pi
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("debug", bool_t, 0, "Enable Debug", True)

gen.add("orb_nfeatures", int_t, 0, "ORB nfeatures", 500, 0, 5000)
gen.add("orb_scaleFactor", double_t, 0, "ORB scaleFactor", 1.2, 1, 2)
gen.add("orb_nlevels", int_t, 0, "ORB nlevels", 8, 0, 32)
gen.add("orb_edgeThreshold", int_t, 0, "ORB edgeThreshold", 5, 0, 1000)
gen.add("orb_firstLevel", int_t, 0, "ORB firstLevel", 0, 0, 10)
gen.add("orb_WTA_K", int_t, 0, "ORB WTA_K", 2, 2, 4)
score_enum = gen.enum([gen.const("HARRIS_SCORE", int_t, 0, "HARRIS_SCORE"), 
                       gen.const("FAST_SCORE",   int_t, 1, "FAST_SCORE")
                      ],"An enum to set score")
gen.add("orb_scoreType", int_t, 0, "ORB scoreType", 0, 0, 1,  edit_method=score_enum)
gen.add("orb_pathSize", int_t, 0, "ORB patchSize", 31, 0, 100)
gen.add("orb_fastTreshold", int_t, 0, "ORB fastThreshold", 20, 0, 100)

matcher_enum = gen.enum([gen.const("KNN",     int_t, 0, "KNN"), 
                         gen.const("Radius",  int_t, 1, "Radius")
                        ],"An enum to set matcher")
gen.add("matcher_type", int_t, 0, "Matcher type", 0, 0, 1, edit_method=matcher_enum)
gen.add("matcher_knn_k", int_t, 0, "Matcher KNN k", 2, 1, 50)
gen.add("matcher_radius", double_t, 0, "Matcher Radius", 1.0, 0.0, 50.0)

gen.add("nn_match_ratio", double_t, 0, "NN Match Ratio", 0.8, 0, 10)

method_enum = gen.enum([gen.const("Default",    int_t, 0, "Default"), #0
                        gen.const("RANSAC",     int_t, 1, "RANSAC"),  #8
                        gen.const("LMEDS",      int_t, 2, "LMEDS"),   #4
                        gen.const("RHO",        int_t, 3, "RHO")     #16
                        ],"An enum to set method")
gen.add("homography_method", int_t, 0, "Homography Method", 1, 0, 3, edit_method=method_enum)
gen.add("homography_ransac_threshold", double_t, 0, "Homography ransacReprojThreshold", 3.0, 0, 10.0)
gen.add("homography_max_iter", int_t, 0, "Homography Max Iteration", 2000, 0, 5000)
gen.add("homography_confidence", double_t, 0, "Homography Confidence", 0.995, 0, 1)

normal_enum = gen.enum([gen.const("x",    int_t, 0, "x"), 
                        gen.const("y",    int_t, 1, "y"),  
                        gen.const("z",    int_t, 2, "z"), ],"An enum to set normals")
gen.add("normal_axis", int_t, 0, "Normal Axis", 2, 0, 2, edit_method=normal_enum)

gen.add("normals_sublimit", double_t, 0, "Normals Sub Limit", 0.8, -1, 1)
gen.add("factor_d1", double_t, 0, "Distance to Surface Confidence", 0.1, 0, 1000)

exit(gen.generate(PACKAGE, "gto", "gto"))
